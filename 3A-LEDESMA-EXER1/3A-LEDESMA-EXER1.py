# -*- coding: utf-8 -*-
"""3A-LEDESMA-EXER1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FzCiTxYhK_iuXcmdpiTkhgc9JhdlV2I7

## **Exercise 1: Propositional Logic in Python**

---


**Objective**
- Students will learn how to represent simple facts and rules using propositional logic, and
implement them in Python.
"""

# Represent the statements using propositional logic
# p: It rains
# q: The ground is wet
# r: The match lights

# If it rains, the ground will be wet
p = True
q = p  # Assuming the ground is wet if it rains
p_implies_q = not p or q

# If the ground is wet, the match will not light
q = True  # Assuming the ground is wet
r = False  # Assuming the match will not light
q_implies_not_r = not q or not r

# Evaluate the logical conditions
if p:
    print("It is raining.")
else:
    print("It is not raining.")

if p_implies_q and q_implies_not_r:
    r = False
    print("The match will not light.")
else:
    r = True
    print("The match lights.")

"""## **Exercise 2: Predicate Logic Representation**

---

**Objective**
- Students will apply predicate logic to represent relationships between objects and
implement them in Python.

"""

# Define the predicate for humans
def isHuman(entity):
    # Returns True if the entity is a human
    return entity == "Socrates"

# Define the predicate for mortals
def isMortal(entity):
    # If the entity is human, it is mortal
    if isHuman(entity):
        return True
    return False

# Check if Socrates is mortal
entity = "Socrates"
if isMortal(entity):
    print(f"{entity} is mortal.")
else:
    print(f"{entity} is not mortal.")

"""## **Exercise 3: Inference Techniques in Logic-Based Systems**

---

**Objective**
- Students will develop an inference system to derive conclusions from premises using
Python.
"""

# Define the rules and facts
rules = [
    ("X", "Y")  # Rule: If X is true, then Y is true
]

facts = ["X"]  # Fact: X is true

# Function to apply Modus Ponens
def apply_modus_ponens(rules, facts):
    new_facts = set(facts)
    for (P, Q) in rules:
        if P in new_facts:
            new_facts.add(Q)
    return new_facts

# Apply Modus Ponens
inferred_facts = apply_modus_ponens(rules, facts)

# Output the inferred facts
print("Inferred Facts:", inferred_facts)

# A rule is represented as a tuple: (premise, conclusion)
rules = [
    ("X", "Y"),  # Rule: If X is true, then Y is true.
    ("Y", "Z"),  # Rule: If Y is true, then Z is true.
    ("A", "B")   # Rule: If A is true, then B is true.
]

# Initial set of facts
facts = ["X", "A"]  # Fact: X is true, A is true

# Function to apply Modus Ponens and infer new facts
def apply_modus_ponens(rules, facts):
    inferred_facts = set(facts)  # Keep track of known facts
    new_inference = True

    while new_inference:
        new_inference = False
        for premise, conclusion in rules:
            if premise in inferred_facts and conclusion not in inferred_facts:
                inferred_facts.add(conclusion)
                new_inference = True
                print(f"Inferred: {conclusion} from {premise}")

    return inferred_facts

# Applying the inference system
inferred_facts = apply_modus_ponens(rules, facts)

# Final output: all inferred facts
print("\nFinal set of inferred facts:", inferred_facts)

"""## **Exercise 4: Hands-on Lab - Implementing a Logic-Based Model in Python**

---

**Objective**
- Students will implement a logic-based system in Python that performs simple reasoning
using propositional or predicate logic.
"""

# Define the initial state
john_hungry = True  # John is initially hungry
john_eats = False   # John has not eaten yet

# Define the rules
def will_eat(is_hungry):
    """Rule: If a person is hungry, they will eat."""
    return is_hungry

def no_longer_hungry(eats):
    """Rule: If a person eats, they will no longer be hungry."""
    return not eats

# Reasoning process
while john_hungry:
    print("John is hungry.")

    # Check if John will eat
    if will_eat(john_hungry):
        john_eats = True  # John decides to eat
        print("John decides to eat.")

        # Update hunger status
        john_hungry = no_longer_hungry(john_eats)
        print("John is no longer hungry.")
    else:
        print("John is still hungry.")
        break  # Exit if John does not eat

# Final state
if john_hungry:
    print("John is still hungry.")
else:
    print("John has eaten and will no longer be hungry.")

"""## **Case Study Discussion**

---

**Objective**
- Analyze a real-world case study where logic-based models are used for decision-making
(e.g., in AI systems or expert systems).

### **Case Study: Knowledge-Based Systems in Medical Diagnosis**

- Knowledge-based systems (KBS) are a significant application of logic-based reasoning in the field of medical diagnosis. These systems are designed to assist healthcare professionals by providing diagnostic suggestions based on patient data and medical knowledge. They utilize propositional and predicate logic to analyze symptoms, medical history, and other relevant information to reach conclusions about potential conditions.

***Application of Logic in Knowledge-Based Systems***

**Propositional Logic**
- In knowledge-based systems, propositional logic is used to represent basic facts and rules about medical conditions.

Example:

"If the patient reports a sore throat and has a fever, then consider the possibility of strep throat."

These rules allow the system to evaluate the truth of specific statements based on the patient's symptoms and provide relevant diagnostic suggestions.

**Predicate Logic**
- Predicate logic enhances the system's ability to process more complex relationships and conditions. For instance, a knowledge-based system could implement rules such as:

"For all patients, if a patient is over 50 years old and has high cholesterol, then they are at increased risk for heart disease."

This capability enables the system to reason about various patient characteristics and their implications for diagnosis, leading to more accurate and individualized recommendations.

***Advantages of Logic-Based Models in Medical Diagnosis***

Enhanced Decision Support
- Logic-based reasoning provides healthcare professionals with structured, evidence-based recommendations.

Consistency and Reliability
- By relying on established rules and facts, knowledge-based systems ensure that diagnostic suggestions are consistent

Scalability of Knowledge
- As medical knowledge evolves, logic-based systems can easily incorporate new rules and information, allowing them to stay current with advancements in medical science.

***Challenges of Logic-Based Models in Medical Diagnosis***

Complexity of Medical Knowledge
- The huge nature of medical knowledge can make it challenging to represent all relevant information in a logical framework. This complexity can lead to gaps in the system's reasoning capabilities.

Handling Uncertainty
- Traditional logic-based models may struggle to incorporate probabilistic reasoning, which is essential for addressing the inherent uncertainties in medical practice.

## **Assignment: Implement a Logic-Based Model in Python**

---

**Objective**
- Develop a more complex logic-based system in Python to model real-world scenarios.
"""

class ExerciseRecommendationSystem:
    def __init__(self):
        # Define initial facts about exercises
        self.exercises = {
            "yoga": {"type": "low-impact", "equipment": False, "duration": "any"},
            "walking": {"type": "low-impact", "equipment": False, "duration": "any"},
            "weightlifting": {"type": "strength", "equipment": True, "duration": "any"},
            "bodyweight exercises": {"type": "strength", "equipment": False, "duration": "any"},
            "HIIT": {"type": "cardio", "equipment": False, "duration": "short"},
            "short run": {"type": "cardio", "equipment": False, "duration": "short"},
            "running": {"type": "cardio", "equipment": False, "duration": "moderate"},
            "cycling": {"type": "cardio", "equipment": False, "duration": "moderate"}
        }

    def recommend_exercise(self, type_of_exercise, has_equipment, duration):
        recommendations = []

        for exercise, details in self.exercises.items():
            if details["type"] == type_of_exercise and details["equipment"] == has_equipment and \
               (details["duration"] == "any" or details["duration"] == duration):
                recommendations.append(exercise)

        if not recommendations:
            return "Hmm, it looks like I don't have any exercise suggestions that fit your preferences right now."

        return recommendations


# Example usage
def main():
    system = ExerciseRecommendationSystem()

    # Simulate chatbot conversation
    print("Hello! I'm here to help you find the perfect exercise.")
    type_of_exercise = input("What type of exercise are you interested in? (e.g., low-impact, strength, cardio): ").strip().lower()
    has_equipment = input("Do you have any equipment? (yes/no): ").strip().lower() == 'yes'
    duration = input("How much time do you have? (short, moderate, any): ").strip().lower()

    # Get recommendations
    print("\nLet me think...")
    recommendations = system.recommend_exercise(type_of_exercise, has_equipment, duration)

    if isinstance(recommendations, list) and recommendations:
        print("\nBased on your preferences, here are some exercise options for you:")
        for exercise in recommendations:
            print(f"- {exercise.capitalize()}")
    else:
        print(recommendations)


if __name__ == "__main__":
    main()